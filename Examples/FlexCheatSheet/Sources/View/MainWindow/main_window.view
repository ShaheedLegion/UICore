
// The root view of the example
view MainWindow : Row
{
	background: rgb(250,250,250);
	font: 11px/15px 'Segoe UI';
	color: black;

	Column panel
	{
		width: 300px;
		background: rgb(240,240,240);
		padding: 15px;

		FlexPanelButton button1 { text = "Put flex items into a row"; };
		FlexPanelButton button2 { text = "Put flex items into a column"; };
		FlexPanelButton button3 { text = "Move flex items to the top"; };
		FlexPanelButton button4 { text = "Move flex items to the left"; };
		FlexPanelButton button5 { text = "Move flex items to the right"; };
		FlexPanelButton button6 { text = "Center everything"; };
		FlexPanelButton button7 { text = "Grow a flex item X times as big as other flex items"; };
		FlexPanelButton button8 { text = "Wrap flex items into multiple rows"; };
		FlexPanelButton button9 { text = "Wrap flex items into multiple columns"; };
		FlexPanelButton button10 { text = "Remove the space from wrapped rows or columns"; };
		FlexPanelButton button11 { text = "Pin an element to one side of the flex container"; };
	};

	Column examples
	{
		flex: 1 1;

		FlexExample1 example1;
		FlexExample2 example2;
		FlexExample3 example3;
		FlexExample4 example4;
		FlexExample5 example5;
		FlexExample6 example6;
		FlexExample7 example7;
		FlexExample8 example8;
		FlexExample9 example9;
		FlexExample10 example10;
		FlexExample11 example11;
	};
}

// Base view for examples to the right side in the window
view FlexExample : Column
{
};

view FlexExample1 : FlexExample
{
	FlexHeadline headline
	{
		text = "Put flex items into a row";
	};

	FlexParagraph paragraph
	{
		text = "Flex items are the children of a flex container. They are positioned along a main axis and a cross axis. "
			"The main axis is horizontal by default, so the items flow into a row. You can flip the main axis by "
			"setting flex-direction to column, it's set to row by default.";
	};

	FlexContainer container
	{
		flex-direction: row;
		FlexRedBox box1, box2, box3, box4;
	};
};

view FlexExample2 : FlexExample
{
	FlexHeadline headline
	{
		text = "Put flex items into a column";
	};

	FlexParagraph paragraph
	{
		text = "Flex items are the children of a flex container. They are positioned along a main axis and a cross axis. "
			"The main axis is horizontal by default, so the items flow into a row. You can flip the main axis by "
			"setting flex-direction to column, it's set to row by default.";
	};

	FlexContainer container
	{
		flex-direction: column;
		FlexRedBox box1, box2, box3, box4;
	};
};

view FlexExample3 : FlexExample
{
	FlexHeadline headline
	{
		text = "Move flex items to the top";
	};

	FlexParagraph paragraph
	{
		text = "How you move flex items to the top depends on the orientation of the main axis. If it's vertical, you "
			"set align-items. If it's horizontal, you set justify-content.";
	};

	FlexContainer container1
	{
		flex-direction: column;
		justify-content: flex-start;
		height: 500px;
		FlexRedBox box1, box2, box3, box4;
	};

	FlexContainer container2
	{
		flex-direction: row;
		align-items: flex-start
		FlexRedBox box1, box2, box3, box4;
	};
};

view FlexExample4 : FlexExample
{
	FlexHeadline headline
	{
		text = "Move flex items to the left";
	};

	FlexParagraph paragraph
	{
		text = "Moving items to the left or right also depends on the orientation of the main axis. If flex-direction "
			"is set to row, then you set justify-content, otherwise if it's set to column you set align-items.";
	};

	FlexContainer container1
	{
		flex-direction: row;
		justify-content: flex-start
		FlexRedBox box1, box2, box3, box4;
	};

	FlexContainer container2
	{
		flex-direction: column;
		align-items: flex-start
		FlexRedBox box1, box2, box3, box4;
	};
};

view FlexExample5 : FlexExample
{
	FlexHeadline headline
	{
		text = "Move flex items to the right";
	};

	FlexParagraph paragraph
	{
		text = "Moving items to the left or right also depends on the orientation of the main axis. If flex-direction "
			"is set to row, then you set justify-content, otherwise if it's set to column you set align-items.";
	};

	FlexContainer container1
	{
		flex-direction: row;
		justify-content: flex-end
		FlexRedBox box1, box2, box3, box4;
	};

	FlexContainer container2
	{
		flex-direction: column;
		align-items: flex-end
		FlexRedBox box1, box2, box3, box4;
	};
};

view FlexExample6 : FlexExample
{
	FlexHeadline headline
	{
		text = "Center everything";
	};

	FlexParagraph paragraph
	{
		text = "Vertical and horizontal centering within a flexcontainer is trivial. Just set justify-content and/or "
			"align-items to center. Again, it depends on the orientation of the main axis, so whether flex-direction "
			"is set to row or column.";
	};

	FlexContainer container1
	{
		flex-direction: column;
		justify-content: center;
		align-items: center
		FlexRedBox box1, box2, box3, box4;
	};

	FlexContainer container2
	{
		flex-direction: row;
		justify-content: center;
		align-items: center
		FlexRedBox box1, box2, box3, box4;
	};
};

view FlexExample7 : FlexExample
{
	FlexHeadline headline
	{
		text = "Grow a flex item X times as big as other flex items";
	};

	FlexParagraph paragraph
	{
		text = "You can define how an individual flex item grows and shrinks relative to other flex items in the "
			"container. To do this set the flex property on each flex item you want to grow or shrink.";
	};

	FlexContainer container
	{
		flex-direction: row;
		FlexRedBox box1 { flex: 2 0 0; }, box2 { flex: 1 0 0; };
	};
};

view FlexExample8 : FlexExample
{
	FlexHeadline headline
	{
		text = "Wrap flex items into multiple rows";
	};

	FlexContainer container
	{
		flex-flow: row wrap;
		align-items: center;
		justify-content: center;
		align-content: flex-end;
		FlexRedBox box1, box2, box3, box4, box5, box6, box7, box8, box9, box10, box11, box12;
	};
};

view FlexExample9 : FlexExample
{
	FlexHeadline headline
	{
		text = "Wrap flex items into multiple columns";
	};

	FlexContainer container
	{
		flex-flow: column wrap;
		align-items: center;
		justify-content: center;
		align-content: stretch;
		FlexRedBox box1, box2, box3, box4, box5, box6, box7, box8;
	};
};

view FlexExample10 : FlexExample
{
	FlexHeadline headline
	{
		text = "Remove the space from wrapped rows or columns";
	};

	FlexParagraph paragraph
	{
		text = "The align-content property gives you options for distributing the space around wrapped rows or "
			"columns. The options are flex-start, flex-end, space-between, space-around and stretch. To simply "
			"remove the space around wrapped columns, set align-content to center.";
	};

	FlexContainer container
	{
		flex-direction: column;
		align-items: center;
		justify-content: center;
		flex-flow: column wrap;
		align-content: center;
		FlexRedBox box1, box2, box3, box4, box5, box6, box7, box8, box9, box10;
	};
};

view FlexExample11 : FlexExample
{
	FlexHeadline headline
	{
		text = "Pin an element to one side of the flex container";
	};

	FlexParagraph paragraph
	{
		text = "You can control the align-items value for individual elements with align-self. You can also use "
			"margins to move individual elements up or down or left of right. e.g. on a column layout you can "
			"move an individual flex item all the way to the left of the container by setting margin-right: auto.";
	};

	FlexContainer container
	{
		FlexRedBox box1, box2 { align-self: flex-start; }, box3 { margin-left: auto; }, box4;
	};
};

// One of the red boxes in the example
view FlexRedBox
{
	width: 100px;
	height: 100px;
	background-color: #e46119;
	border: 1px solid #626262;
	margin: 3px;
};

// The flex container having red boxes in it
view FlexContainer
{
	min-height: 300px;
	max-height: 450px;
	background-color: #dce7f2;
	border: 1px solid #2a4f73;
	width: 750px;
	margin: 15px auto;
};

// A headline in the example
view FlexHeadline : TextBlockBase
{
	font-weight: 400;
	font-style: italic;
	font-size: 24px;
	line-height: 32px;
	width: 750px;
	margin: 15px auto;
	flex: none;
};

// The paragraph text block
view FlexParagraph : TextBlockBase
{
	width: 750px;
	margin: 8px auto;
	flex: none;
};

// Button in the left panel
view FlexPanelButton : ButtonBase
{
	margin: 5px 0;
	padding: 2px 5px;
};
