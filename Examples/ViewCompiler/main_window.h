
// Note: this file was autogenerated by the uicore view compiler

#pragma once

#include <uicore.h>

namespace uiview
{
	using namespace uicore;

	class FlexContainer;
	class FlexExample;
	class FlexExample1;
	class FlexExample10;
	class FlexExample11;
	class FlexExample2;
	class FlexExample3;
	class FlexExample4;
	class FlexExample5;
	class FlexExample6;
	class FlexExample7;
	class FlexExample8;
	class FlexExample9;
	class FlexHeadline;
	class FlexPanelButton;
	class FlexParagraph;
	class FlexRedBox;
	class MainWindow;

	class FlexContainer : public View
	{
	public:
		FlexContainer();
	};

	class FlexExample : public ColumnView
	{
	public:
		FlexExample();
	};

	class FlexExample1 : public FlexExample
	{
	public:
		FlexExample1();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexParagraph> paragraph;
		std::shared_ptr<FlexContainer> container;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
		std::shared_ptr<FlexRedBox> box3;
		std::shared_ptr<FlexRedBox> box4;
	};

	class FlexExample10 : public FlexExample
	{
	public:
		FlexExample10();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexParagraph> paragraph;
		std::shared_ptr<FlexContainer> container;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
		std::shared_ptr<FlexRedBox> box3;
		std::shared_ptr<FlexRedBox> box4;
		std::shared_ptr<FlexRedBox> box5;
		std::shared_ptr<FlexRedBox> box6;
		std::shared_ptr<FlexRedBox> box7;
		std::shared_ptr<FlexRedBox> box8;
		std::shared_ptr<FlexRedBox> box9;
		std::shared_ptr<FlexRedBox> box10;
	};

	class FlexExample11 : public FlexExample
	{
	public:
		FlexExample11();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexParagraph> paragraph;
		std::shared_ptr<FlexContainer> container;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
		std::shared_ptr<FlexRedBox> box3;
		std::shared_ptr<FlexRedBox> box4;
	};

	class FlexExample2 : public FlexExample
	{
	public:
		FlexExample2();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexParagraph> paragraph;
		std::shared_ptr<FlexContainer> container;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
		std::shared_ptr<FlexRedBox> box3;
		std::shared_ptr<FlexRedBox> box4;
	};

	class FlexExample3 : public FlexExample
	{
	public:
		FlexExample3();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexParagraph> paragraph;
		std::shared_ptr<FlexContainer> container1;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
		std::shared_ptr<FlexRedBox> box3;
		std::shared_ptr<FlexRedBox> box4;
		std::shared_ptr<FlexContainer> container2;
		std::shared_ptr<FlexRedBox> box5;
		std::shared_ptr<FlexRedBox> box6;
		std::shared_ptr<FlexRedBox> box7;
		std::shared_ptr<FlexRedBox> box8;
	};

	class FlexExample4 : public FlexExample
	{
	public:
		FlexExample4();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexParagraph> paragraph;
		std::shared_ptr<FlexContainer> container1;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
		std::shared_ptr<FlexRedBox> box3;
		std::shared_ptr<FlexRedBox> box4;
		std::shared_ptr<FlexContainer> container2;
		std::shared_ptr<FlexRedBox> box5;
		std::shared_ptr<FlexRedBox> box6;
		std::shared_ptr<FlexRedBox> box7;
		std::shared_ptr<FlexRedBox> box8;
	};

	class FlexExample5 : public FlexExample
	{
	public:
		FlexExample5();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexParagraph> paragraph;
		std::shared_ptr<FlexContainer> container1;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
		std::shared_ptr<FlexRedBox> box3;
		std::shared_ptr<FlexRedBox> box4;
		std::shared_ptr<FlexContainer> container2;
		std::shared_ptr<FlexRedBox> box5;
		std::shared_ptr<FlexRedBox> box6;
		std::shared_ptr<FlexRedBox> box7;
		std::shared_ptr<FlexRedBox> box8;
	};

	class FlexExample6 : public FlexExample
	{
	public:
		FlexExample6();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexParagraph> paragraph;
		std::shared_ptr<FlexContainer> container1;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
		std::shared_ptr<FlexRedBox> box3;
		std::shared_ptr<FlexRedBox> box4;
		std::shared_ptr<FlexContainer> container2;
		std::shared_ptr<FlexRedBox> box5;
		std::shared_ptr<FlexRedBox> box6;
		std::shared_ptr<FlexRedBox> box7;
		std::shared_ptr<FlexRedBox> box8;
	};

	class FlexExample7 : public FlexExample
	{
	public:
		FlexExample7();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexParagraph> paragraph;
		std::shared_ptr<FlexContainer> container;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
	};

	class FlexExample8 : public FlexExample
	{
	public:
		FlexExample8();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexContainer> container;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
		std::shared_ptr<FlexRedBox> box3;
		std::shared_ptr<FlexRedBox> box4;
		std::shared_ptr<FlexRedBox> box5;
		std::shared_ptr<FlexRedBox> box6;
		std::shared_ptr<FlexRedBox> box7;
		std::shared_ptr<FlexRedBox> box8;
		std::shared_ptr<FlexRedBox> box9;
		std::shared_ptr<FlexRedBox> box10;
		std::shared_ptr<FlexRedBox> box11;
		std::shared_ptr<FlexRedBox> box12;
	};

	class FlexExample9 : public FlexExample
	{
	public:
		FlexExample9();
		std::shared_ptr<FlexHeadline> headline;
		std::shared_ptr<FlexContainer> container;
		std::shared_ptr<FlexRedBox> box1;
		std::shared_ptr<FlexRedBox> box2;
		std::shared_ptr<FlexRedBox> box3;
		std::shared_ptr<FlexRedBox> box4;
		std::shared_ptr<FlexRedBox> box5;
		std::shared_ptr<FlexRedBox> box6;
		std::shared_ptr<FlexRedBox> box7;
		std::shared_ptr<FlexRedBox> box8;
	};

	class FlexHeadline : public TextBlockBaseView
	{
	public:
		FlexHeadline();
	};

	class FlexPanelButton : public ButtonBaseView
	{
	public:
		FlexPanelButton();
	};

	class FlexParagraph : public TextBlockBaseView
	{
	public:
		FlexParagraph();
	};

	class FlexRedBox : public View
	{
	public:
		FlexRedBox();
	};

	class MainWindow : public RowView
	{
	public:
		MainWindow();
		std::shared_ptr<ColumnView> panel;
		std::shared_ptr<FlexPanelButton> button1;
		std::shared_ptr<FlexPanelButton> button2;
		std::shared_ptr<FlexPanelButton> button3;
		std::shared_ptr<FlexPanelButton> button4;
		std::shared_ptr<FlexPanelButton> button5;
		std::shared_ptr<FlexPanelButton> button6;
		std::shared_ptr<FlexPanelButton> button7;
		std::shared_ptr<FlexPanelButton> button8;
		std::shared_ptr<FlexPanelButton> button9;
		std::shared_ptr<FlexPanelButton> button10;
		std::shared_ptr<FlexPanelButton> button11;
		std::shared_ptr<ColumnView> examples;
		std::shared_ptr<FlexExample1> example1;
		std::shared_ptr<FlexExample2> example2;
		std::shared_ptr<FlexExample3> example3;
		std::shared_ptr<FlexExample4> example4;
		std::shared_ptr<FlexExample5> example5;
		std::shared_ptr<FlexExample6> example6;
		std::shared_ptr<FlexExample7> example7;
		std::shared_ptr<FlexExample8> example8;
		std::shared_ptr<FlexExample9> example9;
		std::shared_ptr<FlexExample10> example10;
		std::shared_ptr<FlexExample11> example11;
	};

	inline FlexContainer::FlexContainer()
	{
		style()->set("min-height: 300px; max-height: 450px; background-color: #dce7f2; border: 1px solid #2a4f73; width: 750px; margin: 15px auto");
	}

	inline FlexExample::FlexExample()
	{
	}

	inline FlexExample1::FlexExample1()
	{
		headline = add_child<FlexHeadline>();
		paragraph = add_child<FlexParagraph>();
		container = add_child<FlexContainer>();
		box1 = container->add_child<FlexRedBox>();
		box2 = container->add_child<FlexRedBox>();
		box3 = container->add_child<FlexRedBox>();
		box4 = container->add_child<FlexRedBox>();
		container->style()->set("flex-direction: row");
		headline->set_properties(
		{
			{ "text", "Put flex items into a row" }
		});
		paragraph->set_properties(
		{
			{ "text", "Flex items are the children of a flex container. They are positioned along a main axis and a cross axis. The main axis is horizontal by default, so the items flow into a row. You can flip the main axis by setting flex-direction to column, it's set to row by default." }
		});
	}

	inline FlexExample10::FlexExample10()
	{
		headline = add_child<FlexHeadline>();
		paragraph = add_child<FlexParagraph>();
		container = add_child<FlexContainer>();
		box1 = container->add_child<FlexRedBox>();
		box2 = container->add_child<FlexRedBox>();
		box3 = container->add_child<FlexRedBox>();
		box4 = container->add_child<FlexRedBox>();
		box5 = container->add_child<FlexRedBox>();
		box6 = container->add_child<FlexRedBox>();
		box7 = container->add_child<FlexRedBox>();
		box8 = container->add_child<FlexRedBox>();
		box9 = container->add_child<FlexRedBox>();
		box10 = container->add_child<FlexRedBox>();
		container->style()->set("flex-direction: column; align-items: center; justify-content: center; flex-flow: column wrap; align-content: center");
		headline->set_properties(
		{
			{ "text", "Remove the space from wrapped rows or columns" }
		});
		paragraph->set_properties(
		{
			{ "text", "The align-content property gives you options for distributing the space around wrapped rows or columns. The options are flex-start, flex-end, space-between, space-around and stretch. To simply remove the space around wrapped columns, set align-content to center." }
		});
	}

	inline FlexExample11::FlexExample11()
	{
		headline = add_child<FlexHeadline>();
		paragraph = add_child<FlexParagraph>();
		container = add_child<FlexContainer>();
		box1 = container->add_child<FlexRedBox>();
		box2 = container->add_child<FlexRedBox>();
		box3 = container->add_child<FlexRedBox>();
		box4 = container->add_child<FlexRedBox>();
		box2->style()->set("align-self: flex-start");
		box3->style()->set("margin-left: auto");
		headline->set_properties(
		{
			{ "text", "Pin an element to one side of the flex container" }
		});
		paragraph->set_properties(
		{
			{ "text", "You can control the align-items value for individual elements with align-self. You can also use margins to move individual elements up or down or left of right. e.g. on a column layout you can move an individual flex item all the way to the left of the container by setting margin-right: auto." }
		});
	}

	inline FlexExample2::FlexExample2()
	{
		headline = add_child<FlexHeadline>();
		paragraph = add_child<FlexParagraph>();
		container = add_child<FlexContainer>();
		box1 = container->add_child<FlexRedBox>();
		box2 = container->add_child<FlexRedBox>();
		box3 = container->add_child<FlexRedBox>();
		box4 = container->add_child<FlexRedBox>();
		container->style()->set("flex-direction: column");
		headline->set_properties(
		{
			{ "text", "Put flex items into a column" }
		});
		paragraph->set_properties(
		{
			{ "text", "Flex items are the children of a flex container. They are positioned along a main axis and a cross axis. The main axis is horizontal by default, so the items flow into a row. You can flip the main axis by setting flex-direction to column, it's set to row by default." }
		});
	}

	inline FlexExample3::FlexExample3()
	{
		headline = add_child<FlexHeadline>();
		paragraph = add_child<FlexParagraph>();
		container1 = add_child<FlexContainer>();
		box1 = container1->add_child<FlexRedBox>();
		box2 = container1->add_child<FlexRedBox>();
		box3 = container1->add_child<FlexRedBox>();
		box4 = container1->add_child<FlexRedBox>();
		container2 = add_child<FlexContainer>();
		box5 = container2->add_child<FlexRedBox>();
		box6 = container2->add_child<FlexRedBox>();
		box7 = container2->add_child<FlexRedBox>();
		box8 = container2->add_child<FlexRedBox>();
		container1->style()->set("flex-direction: column; justify-content: flex-start; height: 500px");
		container2->style()->set("flex-direction: row; align-items: flex-start");
		headline->set_properties(
		{
			{ "text", "Move flex items to the top" }
		});
		paragraph->set_properties(
		{
			{ "text", "How you move flex items to the top depends on the orientation of the main axis. If it's vertical, you set align-items. If it's horizontal, you set justify-content." }
		});
	}

	inline FlexExample4::FlexExample4()
	{
		headline = add_child<FlexHeadline>();
		paragraph = add_child<FlexParagraph>();
		container1 = add_child<FlexContainer>();
		box1 = container1->add_child<FlexRedBox>();
		box2 = container1->add_child<FlexRedBox>();
		box3 = container1->add_child<FlexRedBox>();
		box4 = container1->add_child<FlexRedBox>();
		container2 = add_child<FlexContainer>();
		box5 = container2->add_child<FlexRedBox>();
		box6 = container2->add_child<FlexRedBox>();
		box7 = container2->add_child<FlexRedBox>();
		box8 = container2->add_child<FlexRedBox>();
		container1->style()->set("flex-direction: row; justify-content: flex-start");
		container2->style()->set("flex-direction: column; align-items: flex-start");
		headline->set_properties(
		{
			{ "text", "Move flex items to the left" }
		});
		paragraph->set_properties(
		{
			{ "text", "Moving items to the left or right also depends on the orientation of the main axis. If flex-direction is set to row, then you set justify-content, otherwise if it's set to column you set align-items." }
		});
	}

	inline FlexExample5::FlexExample5()
	{
		headline = add_child<FlexHeadline>();
		paragraph = add_child<FlexParagraph>();
		container1 = add_child<FlexContainer>();
		box1 = container1->add_child<FlexRedBox>();
		box2 = container1->add_child<FlexRedBox>();
		box3 = container1->add_child<FlexRedBox>();
		box4 = container1->add_child<FlexRedBox>();
		container2 = add_child<FlexContainer>();
		box5 = container2->add_child<FlexRedBox>();
		box6 = container2->add_child<FlexRedBox>();
		box7 = container2->add_child<FlexRedBox>();
		box8 = container2->add_child<FlexRedBox>();
		container1->style()->set("flex-direction: row; justify-content: flex-end");
		container2->style()->set("flex-direction: column; align-items: flex-end");
		headline->set_properties(
		{
			{ "text", "Move flex items to the right" }
		});
		paragraph->set_properties(
		{
			{ "text", "Moving items to the left or right also depends on the orientation of the main axis. If flex-direction is set to row, then you set justify-content, otherwise if it's set to column you set align-items." }
		});
	}

	inline FlexExample6::FlexExample6()
	{
		headline = add_child<FlexHeadline>();
		paragraph = add_child<FlexParagraph>();
		container1 = add_child<FlexContainer>();
		box1 = container1->add_child<FlexRedBox>();
		box2 = container1->add_child<FlexRedBox>();
		box3 = container1->add_child<FlexRedBox>();
		box4 = container1->add_child<FlexRedBox>();
		container2 = add_child<FlexContainer>();
		box5 = container2->add_child<FlexRedBox>();
		box6 = container2->add_child<FlexRedBox>();
		box7 = container2->add_child<FlexRedBox>();
		box8 = container2->add_child<FlexRedBox>();
		container1->style()->set("flex-direction: column; justify-content: center; align-items: center");
		container2->style()->set("flex-direction: row; justify-content: center; align-items: center");
		headline->set_properties(
		{
			{ "text", "Center everything" }
		});
		paragraph->set_properties(
		{
			{ "text", "Vertical and horizontal centering within a flexcontainer is trivial. Just set justify-content and/or align-items to center. Again, it depends on the orientation of the main axis, so whether flex-direction is set to row or column." }
		});
	}

	inline FlexExample7::FlexExample7()
	{
		headline = add_child<FlexHeadline>();
		paragraph = add_child<FlexParagraph>();
		container = add_child<FlexContainer>();
		box1 = container->add_child<FlexRedBox>();
		box2 = container->add_child<FlexRedBox>();
		container->style()->set("flex-direction: row");
		box1->style()->set("flex: 2 0 0");
		box2->style()->set("flex: 1 0 0");
		headline->set_properties(
		{
			{ "text", "Grow a flex item X times as big as other flex items" }
		});
		paragraph->set_properties(
		{
			{ "text", "You can define how an individual flex item grows and shrinks relative to other flex items in the container. To do this set the flex property on each flex item you want to grow or shrink." }
		});
	}

	inline FlexExample8::FlexExample8()
	{
		headline = add_child<FlexHeadline>();
		container = add_child<FlexContainer>();
		box1 = container->add_child<FlexRedBox>();
		box2 = container->add_child<FlexRedBox>();
		box3 = container->add_child<FlexRedBox>();
		box4 = container->add_child<FlexRedBox>();
		box5 = container->add_child<FlexRedBox>();
		box6 = container->add_child<FlexRedBox>();
		box7 = container->add_child<FlexRedBox>();
		box8 = container->add_child<FlexRedBox>();
		box9 = container->add_child<FlexRedBox>();
		box10 = container->add_child<FlexRedBox>();
		box11 = container->add_child<FlexRedBox>();
		box12 = container->add_child<FlexRedBox>();
		container->style()->set("flex-flow: row wrap; align-items: center; justify-content: center; align-content: flex-end");
		headline->set_properties(
		{
			{ "text", "Wrap flex items into multiple rows" }
		});
	}

	inline FlexExample9::FlexExample9()
	{
		headline = add_child<FlexHeadline>();
		container = add_child<FlexContainer>();
		box1 = container->add_child<FlexRedBox>();
		box2 = container->add_child<FlexRedBox>();
		box3 = container->add_child<FlexRedBox>();
		box4 = container->add_child<FlexRedBox>();
		box5 = container->add_child<FlexRedBox>();
		box6 = container->add_child<FlexRedBox>();
		box7 = container->add_child<FlexRedBox>();
		box8 = container->add_child<FlexRedBox>();
		container->style()->set("flex-flow: column wrap; align-items: center; justify-content: center; align-content: stretch");
		headline->set_properties(
		{
			{ "text", "Wrap flex items into multiple columns" }
		});
	}

	inline FlexHeadline::FlexHeadline()
	{
		style()->set("font-weight: 400; font-style: italic; font-size: 24px; line-height: 32px; width: 750px; margin: 15px auto; flex: none");
	}

	inline FlexPanelButton::FlexPanelButton()
	{
		style()->set("margin: 5px 0; padding: 2px 5px");
	}

	inline FlexParagraph::FlexParagraph()
	{
		style()->set("width: 750px; margin: 8px auto; flex: none");
	}

	inline FlexRedBox::FlexRedBox()
	{
		style()->set("width: 100px; height: 100px; background-color: #e46119; border: 1px solid #626262; margin: 3px");
	}

	inline MainWindow::MainWindow()
	{
		panel = add_child<ColumnView>();
		button1 = panel->add_child<FlexPanelButton>();
		button2 = panel->add_child<FlexPanelButton>();
		button3 = panel->add_child<FlexPanelButton>();
		button4 = panel->add_child<FlexPanelButton>();
		button5 = panel->add_child<FlexPanelButton>();
		button6 = panel->add_child<FlexPanelButton>();
		button7 = panel->add_child<FlexPanelButton>();
		button8 = panel->add_child<FlexPanelButton>();
		button9 = panel->add_child<FlexPanelButton>();
		button10 = panel->add_child<FlexPanelButton>();
		button11 = panel->add_child<FlexPanelButton>();
		examples = add_child<ColumnView>();
		example1 = examples->add_child<FlexExample1>();
		example2 = examples->add_child<FlexExample2>();
		example3 = examples->add_child<FlexExample3>();
		example4 = examples->add_child<FlexExample4>();
		example5 = examples->add_child<FlexExample5>();
		example6 = examples->add_child<FlexExample6>();
		example7 = examples->add_child<FlexExample7>();
		example8 = examples->add_child<FlexExample8>();
		example9 = examples->add_child<FlexExample9>();
		example10 = examples->add_child<FlexExample10>();
		example11 = examples->add_child<FlexExample11>();
		style()->set("background: rgb(250,250,250); font: 11px/15px 'Segoe UI'; color: black");
		panel->style()->set("width: 300px; background: rgb(240,240,240); padding: 15px");
		examples->style()->set("flex: 1 1");
		button1->set_properties(
		{
			{ "text", "Put flex items into a row" }
		});
		button2->set_properties(
		{
			{ "text", "Put flex items into a column" }
		});
		button3->set_properties(
		{
			{ "text", "Move flex items to the top" }
		});
		button4->set_properties(
		{
			{ "text", "Move flex items to the left" }
		});
		button5->set_properties(
		{
			{ "text", "Move flex items to the right" }
		});
		button6->set_properties(
		{
			{ "text", "Center everything" }
		});
		button7->set_properties(
		{
			{ "text", "Grow a flex item X times as big as other flex items" }
		});
		button8->set_properties(
		{
			{ "text", "Wrap flex items into multiple rows" }
		});
		button9->set_properties(
		{
			{ "text", "Wrap flex items into multiple columns" }
		});
		button10->set_properties(
		{
			{ "text", "Remove the space from wrapped rows or columns" }
		});
		button11->set_properties(
		{
			{ "text", "Pin an element to one side of the flex container" }
		});
	}
}
